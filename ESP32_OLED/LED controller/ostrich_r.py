# Code generated by font-to-py.py.
# Font: ostrich-regular.ttf Char set:  0123456789
version = '0.26'

def height():
    return 24

def max_width():
    return 14

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x0b\x00\x3c\x00\x63\x00\x41\x00\x80\x80\x80\x80\x80\x80\x80\x80'\
b'\x00\x80\x00\x80\x01\x00\x03\x00\x06\x00\x0c\x00\x08\x00\x18\x00'\
b'\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x00\x00\x00\x00'\
b'\x10\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x3e\x00'\
b'\x63\x00\x41\x00\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x80\x80\x41\x00\x63\x00\x3e\x00\x07\x00'\
b'\x08\x18\x38\x68\x48\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08'\
b'\x08\x08\x08\x08\x08\x08\x08\x08\x0c\x00\x3e\x00\x63\x00\x41\x00'\
b'\x80\x80\x80\x80\x80\x80\x00\x80\x00\x80\x00\x80\x01\x00\x01\x00'\
b'\x02\x00\x06\x00\x0c\x00\x18\x00\x30\x00\x20\x00\x40\x00\x40\x00'\
b'\x80\x00\x80\x00\x80\x00\x80\x00\xff\x80\x0c\x00\x3c\x00\x63\x00'\
b'\x41\x00\x80\x80\x80\x80\x80\x80\x80\x80\x00\x80\x00\x80\x01\x00'\
b'\x01\x00\x06\x00\x3c\x00\x06\x00\x01\x00\x01\x80\x00\x80\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x41\x00\x63\x00\x3e\x00\x0c\x00\x00\x80'\
b'\x01\x80\x01\x80\x03\x80\x02\x80\x06\x80\x04\x80\x0c\x80\x08\x80'\
b'\x18\x80\x10\x80\x30\x80\x20\x80\x60\x80\x40\x80\xc0\x80\xff\x80'\
b'\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x0c\x00'\
b'\xff\x80\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00'\
b'\x80\x00\xbe\x00\xe3\x00\xc1\x00\x80\x80\x80\x80\x80\x80\x00\x80'\
b'\x00\x80\x80\x80\x80\x80\x80\x80\x80\x80\x41\x00\x63\x00\x3c\x00'\
b'\x0c\x00\x1e\x00\x23\x00\x41\x00\x40\x80\x80\x80\x80\x80\x80\x00'\
b'\x80\x00\x80\x00\xbe\x00\xe3\x00\xc1\x00\x80\x80\x80\x80\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x41\x00\x63\x00'\
b'\x3c\x00\x0e\x00\xff\xf0\x00\x20\x00\x20\x00\x40\x00\x40\x00\xc0'\
b'\x00\x80\x00\x80\x01\x00\x01\x00\x03\x00\x02\x00\x02\x00\x04\x00'\
b'\x04\x00\x0c\x00\x08\x00\x08\x00\x10\x00\x10\x00\x30\x00\x20\x00'\
b'\x20\x00\x40\x00\x0c\x00\x3e\x00\x63\x00\x41\x00\x80\x80\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x80\x80\x41\x80\x63\x00\x3e\x00\x62\x00'\
b'\x41\x00\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80'\
b'\x41\x00\x63\x00\x3e\x00\x0c\x00\x3e\x00\x63\x00\x41\x00\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80'\
b'\x41\x80\x63\x80\x3e\x80\x00\x80\x00\x80\x80\x80\x80\x80\x80\x80'\
b'\x81\x00\x41\x00\x63\x00\x3c\x00'

_index =\
b'\x00\x00\x32\x00\x32\x00\x4c\x00\x00\x00\x32\x00\x00\x00\x32\x00'\
b'\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00'\
b'\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00'\
b'\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00'\
b'\x00\x00\x32\x00\x4c\x00\x7e\x00\x7e\x00\x98\x00\x98\x00\xca\x00'\
b'\xca\x00\xfc\x00\xfc\x00\x2e\x01\x2e\x01\x60\x01\x60\x01\x92\x01'\
b'\x92\x01\xc4\x01\xc4\x01\xf6\x01\xf6\x01\x28\x02\x00\x00\x32\x00'\
b'\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00\x00\x00\x32\x00'\
b'\x00\x00\x32\x00'

_mvfont = memoryview(_font)

def get_ch(ch):
    ordch = ord(ch)
    ordch = ordch + 1 if ordch >= 32 and ordch <= 63 else 63
    idx_offs = 4 * (ordch - 32)
    offset = int.from_bytes(_index[idx_offs : idx_offs + 2], 'little')
    next_offs = int.from_bytes(_index[idx_offs + 2 : idx_offs + 4], 'little')
    width = int.from_bytes(_font[offset:offset + 2], 'little')
    return _mvfont[offset + 2:next_offs], 24, width
 

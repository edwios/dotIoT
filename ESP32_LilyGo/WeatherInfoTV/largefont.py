# Code generated by font_to_py.py.
# Font: zekton rg.ttf Char set:  %.0123456789c
# Cmd: font_to_py.py -x zekton rg.ttf 16 largefont.py -c 0123456789.c% 
version = '0.33'

def height():
    return 17

def baseline():
    return 17

def max_width():
    return 19

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 99

_font =\
b'\x0b\x00\x7f\x80\x7f\xc0\x00\x40\x00\x40\x00\x40\x00\x40\x00\x40'\
b'\x0f\xc0\x1f\x80\x10\x00\x10\x00\x10\x00\x00\x00\x00\x00\x10\x00'\
b'\x10\x00\x10\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x13\x00\x3e\x02\x00\x7f\x04\x00\x41'\
b'\x0c\x00\x41\x08\x00\x41\x10\x00\x41\x10\x00\x41\x20\x00\x41\x60'\
b'\x00\x7f\x4f\x80\x3e\x98\xc0\x00\x90\x40\x01\x10\x40\x03\x10\x40'\
b'\x02\x10\x40\x04\x10\x40\x04\x1f\xc0\x08\x0f\x80\x04\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x60\x60\x0e'\
b'\x00\x1f\xe0\x3f\xf0\x60\x18\x60\x18\x60\x18\x60\x18\x60\x18\x60'\
b'\x18\x60\x18\x60\x18\x60\x18\x60\x18\x60\x18\x60\x18\x60\x18\x3f'\
b'\xf0\x1f\xe0\x06\x00\x70\x70\x18\x18\x18\x18\x18\x18\x18\x18\x18'\
b'\x18\x18\x18\x18\x18\x18\x0d\x00\x3f\xc0\x3f\xe0\x00\x30\x00\x30'\
b'\x00\x30\x00\x30\x00\x30\x0f\xe0\x3f\xc0\x30\x00\x60\x00\x60\x00'\
b'\x60\x00\x60\x00\x60\x00\x7f\xf0\x7f\xf0\x0c\x00\x7f\xc0\x7f\xe0'\
b'\x00\x60\x00\x20\x00\x20\x00\x20\x00\x60\x7f\xe0\x7f\xc0\x00\x60'\
b'\x00\x20\x00\x20\x00\x20\x00\x20\x00\x60\x7f\xe0\x7f\xc0\x0d\x00'\
b'\x06\x60\x04\x60\x0c\x60\x08\x60\x18\x60\x18\x60\x10\x60\x30\x60'\
b'\x20\x60\x60\x60\x60\x60\x7f\xf0\x7f\xf0\x00\x60\x00\x60\x00\x60'\
b'\x00\x60\x0d\x00\x7f\xe0\x7f\xe0\x60\x00\x60\x00\x60\x00\x60\x00'\
b'\x60\x00\x7f\xc0\x7f\xe0\x00\x30\x00\x30\x00\x30\x00\x30\x00\x30'\
b'\x00\x30\x7f\xe0\x7f\xc0\x0e\x00\x1f\xf0\x3f\xf0\x60\x00\x60\x00'\
b'\x60\x00\x60\x00\x60\x00\x6f\xc0\x6f\xf0\x60\x30\x60\x10\x60\x18'\
b'\x60\x18\x60\x10\x60\x10\x3f\xf0\x1f\xe0\x0b\x00\x7f\xe0\x7f\xe0'\
b'\x00\xc0\x00\xc0\x00\x80\x01\x80\x01\x80\x03\x00\x03\x00\x02\x00'\
b'\x06\x00\x06\x00\x0c\x00\x0c\x00\x08\x00\x18\x00\x38\x00\x0d\x00'\
b'\x3f\xe0\x7f\xf0\x60\x30\x60\x10\x60\x10\x60\x10\x60\x30\x3f\xf0'\
b'\x3f\xe0\x60\x30\x60\x10\x60\x10\x60\x10\x60\x10\x60\x30\x7f\xf0'\
b'\x3f\xe0\x0e\x00\x3f\xe0\x3f\xf0\x60\x30\x60\x10\x60\x10\x60\x10'\
b'\x60\x10\x60\x10\x3f\xd0\x1f\xd0\x00\x10\x00\x10\x00\x10\x00\x10'\
b'\x00\x30\x3f\xf0\x3f\xe0\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x1f\xc0\x3f\xc0\x60\x00\x60\x00\x60\x00\x60\x00\x60\x00'\
b'\x60\x00\x60\x00\x60\x00\x3f\xc0\x1f\xc0'

_index =\
b'\x00\x00\x24\x00\x00\x00\x00\x00\x00\x00\x00\x00\x37\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00'\
b'\x00\x00\x7f\x00\xa3\x00\xb6\x00\xda\x00\xfe\x00\x22\x01\x46\x01'\
b'\x6a\x01\x8e\x01\xb2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\xd6\x01\xfa\x01'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 99 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 17
    return _mvfont[doff + 2:next_offs], 17, width
 
